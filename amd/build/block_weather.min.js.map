{"version":3,"sources":["../src/block_weather.js"],"names":["define","$","AJAX","str","mdlcfg","notification","templates","weather","init","enabledOption","openWeatherKey","get_strings","component","done","s","weatherInfo","document","on","tag","html","navigator","geolocation","getCurrentPosition","setPosition","showError","weatherError","position","latitude","coords","longitude","length","openWeather","errorMsg","error","message","context","weathererror","weathericon","M","util","image_url","weathervalue","render","then","fail","exception","api","fetch","response","json","data","cod","Math","floor","main","temp","weatherdesc","description","icon","weatherlocation","name","sys","country"],"mappings":"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","sourcesContent":["define(['jquery', 'core/ajax', 'core/str', 'core/config', 'core/notification', 'core/templates'],\n    function($, AJAX, str, mdlcfg, notification, templates) {\n        var weather = {\n            init: function(enabledOption, openWeatherKey) {\n                str.get_strings([\n                    {'key': 'no_geo_location_support', component: 'block_weather'},\n                    {'key': 'no_openweather_key', component: 'block_weather'}\n                ]).done(function(s) {\n                    weather.weatherInfo(s, enabledOption, openWeatherKey);\n                    $(document).on('click', '.block-weather-refresh', function() {\n                        var tag = $('#weather-container');\n                        var html = '';\n                        tag.html(html);\n                        weather.weatherInfo(s, enabledOption, openWeatherKey);\n                    });\n                });\n            },\n            weatherInfo: function(s, enabledOption, openWeatherKey) {\n                // CHECK IF BROWSER SUPPORTS GEOLOCATION\n                if ('geolocation' in navigator) {\n                    navigator.geolocation.getCurrentPosition(setPosition, showError);\n                } else {\n                    weather.weatherError(s[0]);\n                }\n\n                // SET USER'S POSITION\n                function setPosition(position) {\n                    let latitude = position.coords.latitude;\n                    let longitude = position.coords.longitude;\n                    if (enabledOption === 1 && openWeatherKey.length) {\n                        weather.openWeather(s, openWeatherKey, latitude, longitude);\n                    } else {\n                        var errorMsg = s[1];\n                        weather.weatherError(errorMsg);\n                    }\n                }\n\n                // SHOW ERROR WHEN THERE IS AN ISSUE WITH GEOLOCATION SERVICE\n                function showError(error) {\n                    var errorMsg = `${error.message}`;\n                    weather.weatherError(errorMsg);\n                }\n            },\n            weatherError: function(error) {\n                var context = {\n                    weathererror: `<p> ${error} </p>`,\n                    weathericon: M.util.image_url('unknown', 'block_weather'),\n                    weathervalue: '-'\n                };\n                templates.render('block_weather/weather_info', context).then(function(html, js) {\n                    var tag = $('#weather-container');\n                    tag.html(html);\n                }).fail(notification.exception);\n            },\n            openWeather: function(s, openWeatherKey, latitude, longitude) {\n                let api = `https://api.openweathermap.org/data/2.5/weather?lat=${latitude}&lon=${longitude}&appid=${openWeatherKey}`;\n                fetch(api)\n                    .then(function(response){\n                        return response.json();\n                    })\n                    .then(function(data) {\n                        if (data.cod === 200) {\n                            var context = {\n                                weathervalue: Math.floor(data.main.temp - 273),\n                                weatherdesc: data.weather[0].description,\n                                weathericon: M.util.image_url(data.weather[0].icon, 'block_weather'),\n                                weatherlocation: data.name + ',' + data.sys.country\n                            };\n                            templates.render('block_weather/weather_info', context).then(function(html, js) {\n                                var tag = $('#weather-container');\n                                tag.html(html);\n                            }).fail(notification.exception);\n                        } else {\n                            var errorMsg = s[1];\n                            weather.weatherError(errorMsg);\n                        }\n                    });\n            }\n        };\n        return weather;\n    });\n"],"file":"block_weather.min.js"}